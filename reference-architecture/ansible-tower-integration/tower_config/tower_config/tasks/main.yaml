---

- name: Install pip
  yum:
    name: python2-pip
    state: present
  become: true

- name: Install python-devel
  yum:
    name: python-devel
    state: present
  become: true

- name: Install Tower CLI
  pip:
    name: ansible-tower-cli
  become: true

- name: Install packaging pip library
  pip:
    name: packaging
  become: true

- name: Install azure pip library
  pip:
    name: azure==2.0.0rc5
  become: true

- name: Install msrestazure pip library
  pip:
    name: msrestazure
  become: true

- name: Create tower organization
  tower_organization:
    name: "Default"
    description: "Set to Default since the trial license only allows one organization. You can change it if you have deep pockets"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower project for openshift-ansible-contrib
  tower_project:
    name: "openshift-ansible-contrib"
    description: "sync openshift-ansible-contrib"
    organization: "Default"
    scm_url: https://github.com/strategicdesignteam/openshift-ansible-contrib.git
    scm_type: git
    scm_branch: master
    scm_update_on_launch: true
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower project for ansibledeployocp
  tower_project:
    name: "ansibledeployocp"
    description: "sync ansibledeployocp"
    organization: "Default"
    scm_url: https://github.com/glennswest/ansibledeployocp.git
    scm_type: git
    scm_branch: master
    scm_update_on_launch: true
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower project for ansible-redhat-access-insights-client
  tower_project:
    name: "ansible-redhat-access-insights-client"
    description: "sync ansible-redhat-access-insights-client"
    organization: "Default"
    scm_url: https://github.com/strategicdesignteam/ansible-redhat-access-insights-client.git
    scm_type: git
    scm_branch: master
    scm_update_on_launch: true
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Sync project openshift-ansible-contrib
  command: tower-cli project update -n openshift-ansible-contrib

- name: Sync project ansible-redhat-access-insights-client
  command: tower-cli project update -n ansible-redhat-access-insights-client

- name: Sync project ansibledeployocp
  command: tower-cli project update -n ansibledeployocp

- name: Add tower credential for machine
  tower_credential:
    name: machine-privkey
    kind: ssh
    description: machine-privkey
    organization: "Default"
    state: present
    ssh_key_data: "{{ AWS_MACHINE_SSH_KEY }}"
    username: ec2-user
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower credential for aws
  tower_credential:
    name: ec2
    kind: aws
    description: ec2
    organization: "Default"
    state: present
    username: "{{ AWS_KEY }}"
    password: "{{ AWS_SECRET }}"
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower credential for azure
  tower_credential:
    name: azure
    kind: azure
    description: azure_rm
    organization: "Default"
    state: present
    client: "{{ AZURE_CLIENT }}"
    secret: "{{ AZURE_SECRET }}"
    tenant: "{{ AZURE_TENANT }}"
    subscription: "{{ AZURE_SUBSCRIPTION }}"
    username: "{{ AZURE_USERNAME }}"
    password: "{{ AZURE_PASSWORD }}"
    tower_config_file: "~/.tower_cli.cfg"

- name: Add aws inventory
  tower_inventory:
    name: "aws-inventory"
    description: "Added by tower_config"
    organization: "Default"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add aws group
  tower_group:
    name: aws 
    description: "Added by tower_config"
    source: ec2
    credential: ec2
    inventory: "aws-inventory" 
    source_vars:
      regions: all
      regions_exclude: us-gov-west-1,cn-north-1
      vpc_destination_variable: private_ip_address
      route53: True
      rds: False
      elasticache: False
      hostname_variable: tag_Name
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add azure inventory
  tower_inventory:
    name: "azure-inventory"
    description: "Added by tower_config"
    organization: "Default"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add azure group
  tower_group:
    name: azure
    description: "Added by tower_config"
    source: azure
    credential: azure
    inventory: "azure-inventory"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Get Inventory Source ID
  shell: curl -s -k -u {{ TOWER_USER }}:{{ TOWER_PASSWORD }} https://{{ TOWER_HOSTNAME }}/api/v1/inventory_sources/ | python -m json.tool | grep -m 1 id |awk -F":" '{print $2}' |awk -F"," '{print $1}' |sed 's/^[ \t]*//;s/[ \t]*$//'
  register: myoutput

- name: Create aws-infrastructure job template
  become: true
  tower_job_template:
    name: aws-infrastructure
    job_type: run
    inventory: aws-inventory
    project: openshift-ansible-contrib
    playbook: "reference-architecture/aws-ansible/playbooks/infrastructure.yaml"
    machine_credential: machine-privkey
    cloud_credential: ec2
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Create openshift_create_httpd_file job template
  tower_job_template:
    name: create_httpd_file
    job_type: run
    inventory: aws-inventory
    project: openshift-ansible-contrib
    playbook: "reference-architecture/ansible-tower-integration/create_httpd_file/create_httpd_file.yaml"
    machine_credential: machine-privkey
    cloud_credential: ec2
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Create redhat-access-insights client job template
  tower_job_template:
    name: redhat-access-insights-client
    job_type: run
    inventory: aws-inventory
    project: ansible-redhat-access-insights-client
    playbook: "redhat-access-insights-client.yaml"
    machine_credential: machine-privkey
    cloud_credential: ec2
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Create aws-openshift-install job template
  tower_job_template:
    name: aws-openshift-install
    job_type: run
    inventory: aws-inventory
    become_enabled: yes
    project: openshift-ansible-contrib
    playbook: "reference-architecture/aws-ansible/playbooks/openshift-install.yaml"
    machine_credential: machine-privkey
    cloud_credential: ec2
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Create workflow-ocp-aws-install
  command: tower-cli workflow create --name="workflow-ocp-aws-install" --organization="Default" --description="A workflow for deploying OCP on AWS" -e @workflow-ocp-aws-install-extravars.yaml

- name: Replace inventory source
  lineinfile:
    path: workflow-ocp-aws-install-schema.yml
    regexp: '^REPLACEME'
    line: '  - inventory_source: aws (aws-inventory - {{ myoutput.stdout }})'

- name: Create a schema for workflow-ocp-aws-install
  command: tower-cli workflow schema workflow-ocp-aws-install @workflow-ocp-aws-install-schema.yml

- name: Create azure-openshift-install job template
  tower_job_template:
    name: azure-openshift-install
    job_type: run
    inventory: azure-inventory
    become_enabled: yes
    project: ansibledeployocp 
    playbook: "deploy.yml"
    machine_credential: machine-privkey
    cloud_credential: azure 
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Create workflow-ocp-azure-install
  command: tower-cli workflow create --name="workflow-ocp-azure-install" --organization="Default" --description="A workflow for deploying OCP on Azure" -e @workflow-ocp-azure-install-extravars.yaml

- name: Create a schema for workflow-ocp-azure-install
  command: tower-cli workflow schema workflow-ocp-azure-install @workflow-ocp-azure-install-schema.yml

- name: Reset schema file in case we run again
  lineinfile:
     path: workflow-ocp-aws-install-schema.yml
     regexp: '^(.*)inventory_source'
     line: 'REPLACEME'


